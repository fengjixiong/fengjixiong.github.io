#ifndef _SIPUA_H
#define _SIPUA_H

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <netinet/in.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <eXosip2/eXosip.h>
#include <pthread.h>

#define FENG_DEBUG 1


struct SipUA{
	pthread_mutex_t mutex; 
	pthread_t sip_thread;
	pthread_t rtp_thread;
	eXosip_event_t *je;
	osip_message_t *reg ;
	osip_message_t *invite ;
	osip_message_t *ack ;
	osip_message_t *info ;
	osip_message_t *message ;
	osip_message_t *answer ;
	sdp_message_t *remote_sdp ;

	sdp_connection_t * speech_con_req ;
	sdp_media_t * speech_md_req ;

	sdp_connection_t * video_con_req ;
	sdp_media_t * video_md_req ;

	int call_id;
	int dialog_id;
	int flag;
	int flag2;
	int flag3;
	int flag1;

	int rtp_start;
	int rtp_port;

	int speech_start;
	int speech_port;

	int video_start;
	int video_port;

	char *src_name;
	char *dst_name;
	char *proxy_ip;
	char *identity;
	char *registerer;
	char *source_call;
	char *dest_call;
	char *payload_str;

	char ansCall;
	char localip[128];
	char event_type[55][100];
};
extern struct SipUA mySipUA;

int str2int(char *s);

void myInit(void);

/////////////////////////////////////////
//
/////////////////////////////////////////
void myRegister(int expire1);

/////////////////////////////////////////
//
/////////////////////////////////////////
void myInvite(void);


/////////////////////////////////////////
//
/////////////////////////////////////////
void myHoldUp(void);


/////////////////////////////////////////
//
/////////////////////////////////////////
void myInfo(void);

/////////////////////////////////////////
//
/////////////////////////////////////////
void myMsg(void);


/////////////////////////////////////////
//
/////////////////////////////////////////
void myQuit(void);

	
/////////////////////////////////////////
//
/////////////////////////////////////////
int build_media(int ifSend);

void destroy_media(void);
/////////////////////////////////////////
//
/////////////////////////////////////////
void reNewMsg(void);

void reInviteCall();

void reAckCall(void);

void reCloseCall(void);

void reNewMsgCall(void);

/////////////////////////////////////////
//
/////////////////////////////////////////
void reRegOK();


/////////////////////////////////////////
//
/////////////////////////////////////////
void reRegFail();


/////////////////////////////////////////
//
/////////////////////////////////////////
void reRegRefrsh();

/////////////////////////////////////////
//
/////////////////////////////////////////
void reProcCall();

/////////////////////////////////////////
//
/////////////////////////////////////////
void reRingCall();


/////////////////////////////////////////
//
/////////////////////////////////////////
void reAnswerCall();

/////////////////////////////////////////
//
/////////////////////////////////////////
void *SipThread();

 //////////////////////////////////////
 //	
 //////////////////////////////////////
 void *RtpThread();

/////////////////////////////////////////
//
/////////////////////////////////////////
int sipMainInit(void);

void getSipCommand(void);
void SipQuit(void);

#endif /* _SIPUA_H */
